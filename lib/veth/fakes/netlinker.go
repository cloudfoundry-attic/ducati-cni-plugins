// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-cni-plugins/lib/veth"
	"github.com/vishvananda/netlink"
)

type Netlinker struct {
	LinkAddStub        func(netlink.Link) error
	linkAddMutex       sync.RWMutex
	linkAddArgsForCall []struct {
		arg1 netlink.Link
	}
	linkAddReturns struct {
		result1 error
	}
	LinkSetUpStub        func(netlink.Link) error
	linkSetUpMutex       sync.RWMutex
	linkSetUpArgsForCall []struct {
		arg1 netlink.Link
	}
	linkSetUpReturns struct {
		result1 error
	}
	LinkByNameStub        func(name string) (netlink.Link, error)
	linkByNameMutex       sync.RWMutex
	linkByNameArgsForCall []struct {
		name string
	}
	linkByNameReturns struct {
		result1 netlink.Link
		result2 error
	}
	LinkSetNsFdStub        func(hostVeth netlink.Link, fd int) error
	linkSetNsFdMutex       sync.RWMutex
	linkSetNsFdArgsForCall []struct {
		hostVeth netlink.Link
		fd       int
	}
	linkSetNsFdReturns struct {
		result1 error
	}
}

func (fake *Netlinker) LinkAdd(arg1 netlink.Link) error {
	fake.linkAddMutex.Lock()
	fake.linkAddArgsForCall = append(fake.linkAddArgsForCall, struct {
		arg1 netlink.Link
	}{arg1})
	fake.linkAddMutex.Unlock()
	if fake.LinkAddStub != nil {
		return fake.LinkAddStub(arg1)
	} else {
		return fake.linkAddReturns.result1
	}
}

func (fake *Netlinker) LinkAddCallCount() int {
	fake.linkAddMutex.RLock()
	defer fake.linkAddMutex.RUnlock()
	return len(fake.linkAddArgsForCall)
}

func (fake *Netlinker) LinkAddArgsForCall(i int) netlink.Link {
	fake.linkAddMutex.RLock()
	defer fake.linkAddMutex.RUnlock()
	return fake.linkAddArgsForCall[i].arg1
}

func (fake *Netlinker) LinkAddReturns(result1 error) {
	fake.LinkAddStub = nil
	fake.linkAddReturns = struct {
		result1 error
	}{result1}
}

func (fake *Netlinker) LinkSetUp(arg1 netlink.Link) error {
	fake.linkSetUpMutex.Lock()
	fake.linkSetUpArgsForCall = append(fake.linkSetUpArgsForCall, struct {
		arg1 netlink.Link
	}{arg1})
	fake.linkSetUpMutex.Unlock()
	if fake.LinkSetUpStub != nil {
		return fake.LinkSetUpStub(arg1)
	} else {
		return fake.linkSetUpReturns.result1
	}
}

func (fake *Netlinker) LinkSetUpCallCount() int {
	fake.linkSetUpMutex.RLock()
	defer fake.linkSetUpMutex.RUnlock()
	return len(fake.linkSetUpArgsForCall)
}

func (fake *Netlinker) LinkSetUpArgsForCall(i int) netlink.Link {
	fake.linkSetUpMutex.RLock()
	defer fake.linkSetUpMutex.RUnlock()
	return fake.linkSetUpArgsForCall[i].arg1
}

func (fake *Netlinker) LinkSetUpReturns(result1 error) {
	fake.LinkSetUpStub = nil
	fake.linkSetUpReturns = struct {
		result1 error
	}{result1}
}

func (fake *Netlinker) LinkByName(name string) (netlink.Link, error) {
	fake.linkByNameMutex.Lock()
	fake.linkByNameArgsForCall = append(fake.linkByNameArgsForCall, struct {
		name string
	}{name})
	fake.linkByNameMutex.Unlock()
	if fake.LinkByNameStub != nil {
		return fake.LinkByNameStub(name)
	} else {
		return fake.linkByNameReturns.result1, fake.linkByNameReturns.result2
	}
}

func (fake *Netlinker) LinkByNameCallCount() int {
	fake.linkByNameMutex.RLock()
	defer fake.linkByNameMutex.RUnlock()
	return len(fake.linkByNameArgsForCall)
}

func (fake *Netlinker) LinkByNameArgsForCall(i int) string {
	fake.linkByNameMutex.RLock()
	defer fake.linkByNameMutex.RUnlock()
	return fake.linkByNameArgsForCall[i].name
}

func (fake *Netlinker) LinkByNameReturns(result1 netlink.Link, result2 error) {
	fake.LinkByNameStub = nil
	fake.linkByNameReturns = struct {
		result1 netlink.Link
		result2 error
	}{result1, result2}
}

func (fake *Netlinker) LinkSetNsFd(hostVeth netlink.Link, fd int) error {
	fake.linkSetNsFdMutex.Lock()
	fake.linkSetNsFdArgsForCall = append(fake.linkSetNsFdArgsForCall, struct {
		hostVeth netlink.Link
		fd       int
	}{hostVeth, fd})
	fake.linkSetNsFdMutex.Unlock()
	if fake.LinkSetNsFdStub != nil {
		return fake.LinkSetNsFdStub(hostVeth, fd)
	} else {
		return fake.linkSetNsFdReturns.result1
	}
}

func (fake *Netlinker) LinkSetNsFdCallCount() int {
	fake.linkSetNsFdMutex.RLock()
	defer fake.linkSetNsFdMutex.RUnlock()
	return len(fake.linkSetNsFdArgsForCall)
}

func (fake *Netlinker) LinkSetNsFdArgsForCall(i int) (netlink.Link, int) {
	fake.linkSetNsFdMutex.RLock()
	defer fake.linkSetNsFdMutex.RUnlock()
	return fake.linkSetNsFdArgsForCall[i].hostVeth, fake.linkSetNsFdArgsForCall[i].fd
}

func (fake *Netlinker) LinkSetNsFdReturns(result1 error) {
	fake.LinkSetNsFdStub = nil
	fake.linkSetNsFdReturns = struct {
		result1 error
	}{result1}
}

var _ veth.Netlinker = new(Netlinker)
