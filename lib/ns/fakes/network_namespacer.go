// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-cni-plugins/lib/ns"
)

type NetworkNamespacer struct {
	GetFromPathStub        func(string) (ns.Handle, error)
	getFromPathMutex       sync.RWMutex
	getFromPathArgsForCall []struct {
		arg1 string
	}
	getFromPathReturns struct {
		result1 ns.Handle
		result2 error
	}
	SetStub        func(ns.Handle) error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 ns.Handle
	}
	setReturns struct {
		result1 error
	}
}

func (fake *NetworkNamespacer) GetFromPath(arg1 string) (ns.Handle, error) {
	fake.getFromPathMutex.Lock()
	fake.getFromPathArgsForCall = append(fake.getFromPathArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.getFromPathMutex.Unlock()
	if fake.GetFromPathStub != nil {
		return fake.GetFromPathStub(arg1)
	} else {
		return fake.getFromPathReturns.result1, fake.getFromPathReturns.result2
	}
}

func (fake *NetworkNamespacer) GetFromPathCallCount() int {
	fake.getFromPathMutex.RLock()
	defer fake.getFromPathMutex.RUnlock()
	return len(fake.getFromPathArgsForCall)
}

func (fake *NetworkNamespacer) GetFromPathArgsForCall(i int) string {
	fake.getFromPathMutex.RLock()
	defer fake.getFromPathMutex.RUnlock()
	return fake.getFromPathArgsForCall[i].arg1
}

func (fake *NetworkNamespacer) GetFromPathReturns(result1 ns.Handle, result2 error) {
	fake.GetFromPathStub = nil
	fake.getFromPathReturns = struct {
		result1 ns.Handle
		result2 error
	}{result1, result2}
}

func (fake *NetworkNamespacer) Set(arg1 ns.Handle) error {
	fake.setMutex.Lock()
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 ns.Handle
	}{arg1})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(arg1)
	} else {
		return fake.setReturns.result1
	}
}

func (fake *NetworkNamespacer) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *NetworkNamespacer) SetArgsForCall(i int) ns.Handle {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].arg1
}

func (fake *NetworkNamespacer) SetReturns(result1 error) {
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

var _ ns.NetworkNamespacer = new(NetworkNamespacer)
