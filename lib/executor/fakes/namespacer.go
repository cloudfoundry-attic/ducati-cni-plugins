// This file was generated by counterfeiter
package fakes

import (
	"os"
	"sync"

	"github.com/cloudfoundry-incubator/ducati-cni-plugins/lib/executor"
)

type Namespacer struct {
	OpenStub        func() (*os.File, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct{}
	openReturns     struct {
		result1 *os.File
		result2 error
	}
	ExecuteStub        func(func(*os.File) error) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 func(*os.File) error
	}
	executeReturns struct {
		result1 error
	}
}

func (fake *Namespacer) Open() (*os.File, error) {
	fake.openMutex.Lock()
	fake.openArgsForCall = append(fake.openArgsForCall, struct{}{})
	fake.openMutex.Unlock()
	if fake.OpenStub != nil {
		return fake.OpenStub()
	} else {
		return fake.openReturns.result1, fake.openReturns.result2
	}
}

func (fake *Namespacer) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *Namespacer) OpenReturns(result1 *os.File, result2 error) {
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *Namespacer) Execute(arg1 func(*os.File) error) error {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 func(*os.File) error
	}{arg1})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1)
	} else {
		return fake.executeReturns.result1
	}
}

func (fake *Namespacer) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *Namespacer) ExecuteArgsForCall(i int) func(*os.File) error {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].arg1
}

func (fake *Namespacer) ExecuteReturns(result1 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

var _ executor.Namespacer = new(Namespacer)
