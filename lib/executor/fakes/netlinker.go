// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/ducati-cni-plugins/lib/executor"
	"github.com/vishvananda/netlink"
)

type Netlinker struct {
	LinkSetNsFdStub        func(link netlink.Link, fd int) error
	linkSetNsFdMutex       sync.RWMutex
	linkSetNsFdArgsForCall []struct {
		link netlink.Link
		fd   int
	}
	linkSetNsFdReturns struct {
		result1 error
	}
	RouteAddStub        func(*netlink.Route) error
	routeAddMutex       sync.RWMutex
	routeAddArgsForCall []struct {
		arg1 *netlink.Route
	}
	routeAddReturns struct {
		result1 error
	}
	LinkSetUpStub        func(link netlink.Link) error
	linkSetUpMutex       sync.RWMutex
	linkSetUpArgsForCall []struct {
		link netlink.Link
	}
	linkSetUpReturns struct {
		result1 error
	}
}

func (fake *Netlinker) LinkSetNsFd(link netlink.Link, fd int) error {
	fake.linkSetNsFdMutex.Lock()
	fake.linkSetNsFdArgsForCall = append(fake.linkSetNsFdArgsForCall, struct {
		link netlink.Link
		fd   int
	}{link, fd})
	fake.linkSetNsFdMutex.Unlock()
	if fake.LinkSetNsFdStub != nil {
		return fake.LinkSetNsFdStub(link, fd)
	} else {
		return fake.linkSetNsFdReturns.result1
	}
}

func (fake *Netlinker) LinkSetNsFdCallCount() int {
	fake.linkSetNsFdMutex.RLock()
	defer fake.linkSetNsFdMutex.RUnlock()
	return len(fake.linkSetNsFdArgsForCall)
}

func (fake *Netlinker) LinkSetNsFdArgsForCall(i int) (netlink.Link, int) {
	fake.linkSetNsFdMutex.RLock()
	defer fake.linkSetNsFdMutex.RUnlock()
	return fake.linkSetNsFdArgsForCall[i].link, fake.linkSetNsFdArgsForCall[i].fd
}

func (fake *Netlinker) LinkSetNsFdReturns(result1 error) {
	fake.LinkSetNsFdStub = nil
	fake.linkSetNsFdReturns = struct {
		result1 error
	}{result1}
}

func (fake *Netlinker) RouteAdd(arg1 *netlink.Route) error {
	fake.routeAddMutex.Lock()
	fake.routeAddArgsForCall = append(fake.routeAddArgsForCall, struct {
		arg1 *netlink.Route
	}{arg1})
	fake.routeAddMutex.Unlock()
	if fake.RouteAddStub != nil {
		return fake.RouteAddStub(arg1)
	} else {
		return fake.routeAddReturns.result1
	}
}

func (fake *Netlinker) RouteAddCallCount() int {
	fake.routeAddMutex.RLock()
	defer fake.routeAddMutex.RUnlock()
	return len(fake.routeAddArgsForCall)
}

func (fake *Netlinker) RouteAddArgsForCall(i int) *netlink.Route {
	fake.routeAddMutex.RLock()
	defer fake.routeAddMutex.RUnlock()
	return fake.routeAddArgsForCall[i].arg1
}

func (fake *Netlinker) RouteAddReturns(result1 error) {
	fake.RouteAddStub = nil
	fake.routeAddReturns = struct {
		result1 error
	}{result1}
}

func (fake *Netlinker) LinkSetUp(link netlink.Link) error {
	fake.linkSetUpMutex.Lock()
	fake.linkSetUpArgsForCall = append(fake.linkSetUpArgsForCall, struct {
		link netlink.Link
	}{link})
	fake.linkSetUpMutex.Unlock()
	if fake.LinkSetUpStub != nil {
		return fake.LinkSetUpStub(link)
	} else {
		return fake.linkSetUpReturns.result1
	}
}

func (fake *Netlinker) LinkSetUpCallCount() int {
	fake.linkSetUpMutex.RLock()
	defer fake.linkSetUpMutex.RUnlock()
	return len(fake.linkSetUpArgsForCall)
}

func (fake *Netlinker) LinkSetUpArgsForCall(i int) netlink.Link {
	fake.linkSetUpMutex.RLock()
	defer fake.linkSetUpMutex.RUnlock()
	return fake.linkSetUpArgsForCall[i].link
}

func (fake *Netlinker) LinkSetUpReturns(result1 error) {
	fake.LinkSetUpStub = nil
	fake.linkSetUpReturns = struct {
		result1 error
	}{result1}
}

var _ executor.Netlinker = new(Netlinker)
